Ajax：Asynchronous javascript and xml 异步的JS和XML ->我们一般在项目中使用Ajax最好采用异步编程 同域数据请求和传输
JSONP:跨域数据请求和传输

[同源策略/非同源策略(跨域)]
URL:协议、域名、端口号
两个URL地址以上三个维度,只要有一个不一样就属于跨域

http://192.168.0.5/index.html && http://192.168.0.5/vide/search.html (同域)
http://192.168.0.5/a.html && http://192.168.0.5:88/a.html (跨域)
http://192.168.0.5/index.html(当前客户端页面的URL地址) && http://matchweb.sports.qq.com/kbs/hotMatchList(需要请求数据的URL地址) (跨域)
http://www.qq.com/ && http://v.qq.com/ (跨域)

[多级域名]
www.qq.com ->一级域名
sports.qq.com ->二级域名
kbs.sports.qq.com ->三级域名








1、HTTP(默认端口是80)
  ->超文本传输协议:除了可以传递文本信息以外,对于图片、音视频、HTML、JS、CSS、JSON这些数据都可以进行传输
  ->客户端和服务器端数据或者内容的传输,靠的就是HTTP,它相当于生活中的快递公司
  ->HTTPS:比HTTP传输更加安全的协议(默认端口是443)
  ->FTP:文件传输协议(默认端口号是21)


  [HTTP METHOD]传输方式
    不管以下哪一种传输的方式,既可以向服务器传递数据,也可以从服务器获取数据,只不过每一种传输方式都有自己的特殊用途
    ->GET:向服务器获取数据(给的少拿的多)
    ->POST:向服务器发送数据(给的多拿的少)
    ->PUT:向服务器中增加数据或者资源文件
    ->DELETE:从服务器上删除数据或者资源文件
    ...

  *****GET和POST的区别
  “大小”
  GET:
  ->向服务器发送内容的时候,GET请求是把需要传递给服务器的内容,放在请求URL地址的后面传递过去的(问号传参)
    例如：xhr.open("get", "/getAllList?a=1&b=2&c=3");

  POST:
  ->向服务器发送内容的时候,POST请求是把需要传递给服务器的内容,放在请求主体中传递给服务器的
    例如：xhr.open("post", "/getAllList");
    xhr.send('{"a":1,"b":2,"c":3}');//->send中编写的内容就是请求主体的内容,一般情况下我们传递给后台服务器的请求主体内容都是JSON格式的字符串

  原因：每一个浏览器对于URL的长度都有大小的限制(谷歌8KB 火狐7KB IE2KB),需要传递给服务器的内容如果很多,使用GET请求可能出现拼接的URL长度太大,那么超出的部分浏览器自己就给截断了,服务器获取到的数据就不完整了,我们此时用POST(例如:用户注册完成,向服务器提交用户注册的信息)

  “安全”
  GET:
  ->GET请求一般不安全,因为我们传递给服务器的内容放在URL中了,现在有一些黑客技术是可以劫持你发送的URL地址,这样导致信息泄露...

  POST:
  ->POST是把内容放在主体中,即使别人劫持了URL,传给服务器的数据也是获取不到的...

  “缓存”
  ->GET请求默认会存在缓存,第一次通过一个URL地址请求数据,请求成功后,浏览器和服务器之间会存在一个请求的缓存记录,当下一次重新通过这个地址请求最新的数据,很有可能请求的是上一次缓存下来的数据,这样不能实实获取最新的数据了...
  ->POST请求不会存在这个问题

  我们可以通过代码让GET请求不走缓存:
  ->在每一次请求的URL地址后面增加随机数
  xhr.open("get", "/getAllList?_="+Math.random());





  [HTTP STATUES]网络状态码:HTTP交互中的一个网络状态
    ->200或者是以2开头的:成功

    【3开头的是重定向】
    ->301--永久转移  --303--永久重定向 例如"www.360buy.com"永久转移/重定向到"www.jd.com"
    ->302--临时转移  --307--临时重定向 最常用的是'负载均衡'
    ->304--读取的是缓存数据

    【4开头的是请求错误】
    ->400--请求参数有误
    ->401--未认证 没有登陆或者登录信息无效
    --403--资源不可用,服务器理解客户的请求,但是拒绝处理它,通常是权限设置不当引起
    ->404--在服务器上未发现对应的资源文件
    ->413--提交给服务器的资源文件过大,服务器不予处理

    【5开头的一般是服务器错误】
    ->500--服务器遇到了未知错误
    ->503--请求并发的人数过多,服务器停止处理后续请求
    ...

  [URI/URL/URN]
   URI:统一资源标识符,URL、URN都是URI的一种
   URL:统一资源定位符(通过URL地址定位到具体的某个文件)
   URN:统一资源名称

[起始行、首部、主体] ->HTTP报文
[General] 通用首部(请求和响应两个阶段都存在的首部)
  Request URL:http://192.168.0.5/index.html?name=zhufeng&age=7 ->请求地址
  Request Method:GET ->请求的方式(HTTP METHOD)
  Status Code:200 OK ->响应的状态(HTTP STATUS)
  Remote Address:192.168.0.5:80 ->服务器的IP地址及端口号

[Response Headers] 响应头信息(view source是查看完整信息)
  HTTP/1.1 200 OK  ->响应的起始行(存储的是响应的基本信息)
  content-type: text/html;charset=utf-8; ->响应内容的MIME类型和编码格式
  Date: Wed, 15 Jun 2016 07:56:13 GMT ->当前响应的服务器时间(是格林尼治时间)
  Connection: keep-alive
  Transfer-Encoding: chunked

[Request Headers] 请求头信息
  GET /index.html?name=zhufeng&age=7 HTTP/1.1  ->请求的起始行
  Host: 192.168.0.5
  Connection: keep-alive
  Cache-Control: max-age=0
  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
  Upgrade-Insecure-Requests: 1
  User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2679.0 Safari/537.36
  Accept-Encoding: gzip, deflate, sdch
  Accept-Language: zh-CN,zh;q=0.8

我们发现请求阶段或者响应阶段,HTTP起始行中信息都是重要的基本信息,但是HTTP首部中的信息比较多
->但是部分首部信息是可以进行修改的：
  NODE: res.writeHead(200, {'content-type': suffixType + ';charset=utf-8;'}); 这就是在修改响应首部content-type这个属性的值

->还可以设置一些自己定义的首部:
  NODE: res.writeHead(200, {'zhufeng':7}); 'zhufeng'就是我自己定义的响应首部

客户端向服务器端发送请求,传递了很多信息(起始行、首部、主体),服务器端可以把这些信息获取到;同理,服务器端返回给客户端的相关信息(起始行、首部、主体),客户端同样可以获取到








