1.单例模式：优点：防止变量名冲突，模块化开发； 缺点：手工作业模式，必须一个一个创建对象
解决以上办法
2.工厂模式 优点：函数封装，低耦合高内聚
工厂模式3步骤：
1）创建一个控对象
2）对他添加属性和方法
3）返回对象
工厂模式调用：函数名 fn();
我们想实现：new Fn();
3.构造函数模式 new Fn()----实例和类
因为加了new,系统帮我们做了两件事；
构造函数模式1步骤：
1）系统帮我们创建对象--自己不用干 this 指向当前实例
2）对他添加属性和方法
3）系统帮我们返回对象--自己不用干；
构造函数模式的优缺点：
优点：表面实现系统定义的类，实例
缺点：方法都是私有的，新new出来的实例，都不了这个方法；
4.原型模式 prototype---实例，类，prototype
1）每个函数数据类型都有一个prototype的属性，它是个对象
2）prototype这个对象上天生自带一个属性constructor，属性值当前这个类；
3）每个对象类型都有__proto__的属性，属性值：当前实例所属类的原型（prototype）
5.我们自己创建的Fn()--自定义的类；并且自定义的类可以创建实例- new Fn();
6.给数组去重的方法写在prototype
7.区分prototype和__proto__他两都是干嘛的
prototype：公有的属性和方法；
__proto__：原型链，帮你一级级往上找你要的属性和方法；