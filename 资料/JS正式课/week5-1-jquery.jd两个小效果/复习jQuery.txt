(function(){
    var jQuery = function( selector, context ) {
    	return new jQuery.fn.init( selector, context );
    }

    jQuery.fn = jQuery.prototype = {
        constructor: jQuery
    };

    jQuery.extend = jQuery.fn.extend = function(){

    };

    window.jQuery = window.$ = jQuery;
})();

1、jQuery的选择器:通过传递对应的规则获取到所匹配的元素/元素集合 ->把私有的jQuery方法执行,需要传递两个参数值：selector(这个值的类型可以是字符串、DOM对象、函数,每一个类型都有自己不同的作用)、context(第二个参数可以不传递,默认的值是document,限定了当前获取元素的范围)
  $("#div1")
  jQuery(".move")
  jQuery("div")

2、jQuery本身是一个类,我们通过选择器获取到的结果,是这个类的一个实例->我们通过选择器获取到的结果(jQuery对象)可以调取jQuery.prototype上的方法了
   $().addClass()
   $().removeClass()

3、jQuery选择器类型 ->"20160523_综合复习/js笔记/jQuery的选择器类型.txt"

4、jQuery中常用的方法
   ->定义在jQuery.prototype上的公共方法,供jQuery的实例(通过jQuery选择器获取的结果)来调用
     例如：addClass、css、attr...
     $(".w1").addClass()

   ->把jQuery看做和obj一样的一个普通对象,定义在其属性上的
     例如：Callbacks、ajax、each...
     jQuery.ajax() / $.ajax()

5、给jQuery这个类库扩展方法
   ->extend:在jQuery对象的属性上存在,同时在jQuery类的原型上也存在
   $.extend() ->扩展到对象的属性上:完善类库,给类库中提供一些常用的核心方法
   $.fn.extend() ->扩展到类的原型上:给类的实例提供更多的操作方法,主要用于基于jQuery的插件编写

6、jQuery中的each
   ->jQuery内置循环系统
   $("div").addClass("test") ->我们选择器获取到的结果有五个,这样一执行的话,相当于分别给每一个都增加了test这个样式
   $("div").css("background","red") ->给五个分别设置背景颜色
   $("div").css("width") ->只获取集合中第一个元素的宽度值

   ->jQuery.prototype.each
   //循环获取集合中的每一项
   $("div").each(function(index,item){
        //index->当前循环这一项的索引

        //item->当前循环的这一项,它是一个原生DOM元素对象,不是jQuery的实例了,而且在这个匿名回调函数中的this等价于我们item
        item.innerHTML="珠峰"; / this.innerHTML="珠峰";

        //通过选择器可以把每一项转换为jQuery实例
        $(item) / $(this)
   });

   ->jQuery.each
   //遍历数组、类数组、对象中的每一项
   $.each(ary,function(index,item){
        //this===item
   });
   $.each(obj,function(key,value){
        //this===value
   });

7、关于多个类库并存的问题
   ->引入一个jQuery,我们全局下的$代表jQuery
   ->引入一个Zepto,我们全局下的$代表Zepto
   ->我两个类库都引入,$该代表谁? ->最后引入的那一个类库
   jQuery中提供了转让$的使用权的方法 ->jQuery.noConflict()

8、filter、find、children
   filter:同级过滤 $("div").filter(".w1")
   children:子集过滤 $("#div1").children(".w1");
   find:后代过滤 $("#div1").find(".w1");

9、jQuery支持强大的链式写法
   $("#div5").addClass("bg").attr("index",4).siblings().removeClass("bg")....